/**
  * @file stc3117.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for stc3117 device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Devices/RegDevice/register_device.h"
#include "stc3117_regs.h"

/*user-block-top-start*/
/*user-block-top-end*/


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev;            //ptr to base register-device 
    mrt_reg_t mMode;                 //Mode register
    mrt_reg_t mCtrl;                 //Control and status register
    mrt_reg_t mSoc;                  //Battery SOC (LSB = 1/512 %)
    mrt_reg_t mCounter;              //Number of conversions
    mrt_reg_t mCurrent;              //Battery current
    mrt_reg_t mVoltage;              //Battery voltage (LSB = 2.2 mV)
    mrt_reg_t mTemperature;          //Temperature in degrees C (LSB = 1deg C )
    mrt_reg_t mAvgCurrent;           //Battery average current or SOC change rate
    mrt_reg_t mOcv;                  //OCV register (LSV = 0.55 mV)
    mrt_reg_t mCcCnf;                //Battery average current or SOC change rate
    mrt_reg_t mVmCnf;                //Voltage gas gauge algorithm parameter
    mrt_reg_t mAlarmSoc;             //SOC alarm level in (LSB = 0.5%)
    mrt_reg_t mAlarmVoltage;         //Battery low voltage alarm level (LSB = 17.6 mV)
    mrt_reg_t mCurrentThres;         //Current threshold for current monitoring (LSB = 47.04 uV )
    mrt_reg_t mCmonitCount;          //Current monitoring counter
    mrt_reg_t mCmonitMax;            //Maximum counter value for current monitoring
    mrt_reg_t mId;                   //Part type ID = 16h
    mrt_reg_t mCcAdj;                //Coulomb counter adjustment register
    mrt_reg_t mVmAdj;                //Voltage mode adjustment register
/*user-block-struct-start*/
/*user-block-struct-end*/
}stc3117_t;

/**
 * @brief initializes stc3117 device for i2c bus
 * @param dev ptr to stc3117 device
 * @param i2c handle for i2c bus
 */
mrt_status_t stc_init_i2c(stc3117_t* dev, mrt_i2c_handle_t i2c);

/**
  *@brief tests interface with device
  *@param dev ptr to stc3117 device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t stc_test(stc3117_t* dev);

/**
  *@brief writes register of device
  *@param dev ptr to stc3117 device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define stc_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to stc3117 device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define stc_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/
/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif